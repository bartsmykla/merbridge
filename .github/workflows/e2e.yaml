name: E2E CI

on:
  # push:
  #   branches: [ main, test ]
  pull_request:
    branches: [ main, test ]
    types:
      - '*'

jobs:
  docker-build:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'needs-e2e-test') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ghcr.io/merbridge/merbridge:${{ github.sha }}
          push: false
      - name: images
        run: |
          docker save -o merbridge-image-${{ github.sha }}.tar ghcr.io/merbridge/merbridge:${{ github.sha }}
      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: merbridge-image-${{ github.sha }}.tar
          retention-days: 1
  istio-e2e-docker:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs: [docker-build]
    if: ${{ contains(github.event.pull_request.labels.*.name, 'needs-e2e-test') }}
    env: 
      ISTIO_VERSION: '1.12.2'
      KIND_VERSION: v0.11.1
      KERNEL_VERSION: v5.4
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
    - name: Set up Helm
      run: |
        bash -c "$(curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3)"
    - name: install bpftool
      run: |
        sudo bash ./scripts/build-bpftool.sh
    - name: setup kind cluster
      run: |
        ./scripts/setup-kind.sh
    - name: Retrieve saved Docker image
      uses: actions/download-artifact@v2
      with:
        name: docker-artifact
        path: .

    - name: load images
      run: |
        docker load -i merbridge-image-${{ github.sha }}.tar
        kind load docker-image ghcr.io/merbridge/merbridge:${{ github.sha }} --name merbridge
    - name: install istio
      run: |
        cat > /tmp/istio-config <<EOF
        apiVersion: install.istio.io/v1alpha1
        kind: IstioOperator
        spec:
          meshConfig:
            defaultConfig:
              proxyMetadata:
                # Enable basic DNS proxying
                ISTIO_META_DNS_CAPTURE: "true"
                # Enable automatic address allocation, optional
                ISTIO_META_DNS_AUTO_ALLOCATE: "true"
        EOF
        bash ./scripts/install-istio.sh -f /tmp/istio-config
        rm -f /tmp/istio-config
    - name: deploy test apps
      run: |
        kubectl label ns default istio-injection=enabled
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/sleep/sleep.yaml
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/helloworld/helloworld.yaml
        while true; do [ "$(kubectl get po -l app=sleep | grep '2/2')" = "" ] || break && (echo waiting for sleep app ready; sleep 3); done
        while true; do [ "$(kubectl get po -l app=helloworld | grep '2/2')" = "" ] || break && (echo waiting for helloworld app ready; sleep 3); done
    - name: test connect without Merbridge
      run: |
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
    - name: install merbridge with docker
      run: |
        helm install -n istio-system merbridge ./helm --set image.tag=${{ github.sha }} --set image.pullPolicy=IfNotPresent --set debug=true
        while true; do [ "$(kubectl -n istio-system get po -l app=merbridge | grep '1/1')" = "" ] || break && (echo waiting for merbridge pod ready; sleep 3); done
        nohup kubectl -n istio-system logs $(kubectl -n istio-system get po -l app=merbridge -o=jsonpath='{..metadata.name}') merbridge -f > mbctl.log &
        while true; do [ "$(cat mbctl.log | grep 'Pod Watcher Ready')" = "" ] || break && (echo waiting for mbctl watcher ready; sleep 3); done
    - name: test connect with Merbridge
      run: |
        set -x
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
        sudo cat /sys/kernel/debug/tracing/trace > /tmp/trace-log
        # check if eBPF works
        [ "$(sudo cat /tmp/trace-log | grep 'from user container')" = "" ] && (echo eBPF progs not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 11)
        [ "$(sudo cat /tmp/trace-log | grep 'bytes with eBPF successfully')" = "" ] && (echo eBPF redirect progs not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 12)
        [ "$(sudo cat /tmp/trace-log | grep 'successfully deal DNS redirect query')" = "" ] && (echo DNS Proxy not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 13)
        sudo rm -f /tmp/trace-log

  istio-e2e-source-code:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    if: ${{ contains(github.event.pull_request.labels.*.name, 'needs-e2e-test') }}
    env: 
      ISTIO_VERSION: '1.12.2'
      KIND_VERSION: v0.11.1
      KERNEL_VERSION: v5.4
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
    - name: install bpftool
      run: |
        sudo bash ./scripts/build-bpftool.sh
    - name: setup kind cluster
      run: |
        ./scripts/setup-kind.sh
    - name: try load and unload
      run: |
        uname -a
        make load
        make attach
        make clean
    - name: install istio
      run: |
        cat > /tmp/istio-config <<EOF
        apiVersion: install.istio.io/v1alpha1
        kind: IstioOperator
        spec:
          meshConfig:
            defaultConfig:
              proxyMetadata:
                # Enable basic DNS proxying
                ISTIO_META_DNS_CAPTURE: "true"
                # Enable automatic address allocation, optional
                ISTIO_META_DNS_AUTO_ALLOCATE: "true"
        EOF
        bash ./scripts/install-istio.sh -f /tmp/istio-config
        rm -f /tmp/istio-config
    - name: deploy test apps
      run: |
        kubectl label ns default istio-injection=enabled
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/sleep/sleep.yaml
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/helloworld/helloworld.yaml
        while true; do [ "$(kubectl get po -l app=sleep | grep '2/2')" = "" ] || break && (echo waiting for sleep app ready; sleep 3); done
        while true; do [ "$(kubectl get po -l app=helloworld | grep '2/2')" = "" ] || break && (echo waiting for helloworld app ready; sleep 3); done
    - name: test connect without Merbridge
      run: |
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
    - name: install merbridge
      run: |
        nohup go run -exec sudo ./app/main.go -k -m istio -d > mbctl.log &
        while true; do [ "$(cat mbctl.log | grep 'Pod Watcher Ready')" = "" ] || break && (echo waiting for mbctl watcher ready; sleep 3); done
    - name: test connect with Merbridge
      run: |
        set -x
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
        sudo cat /sys/kernel/debug/tracing/trace > /tmp/trace-log
        # check if eBPF works
        [ "$(sudo cat /tmp/trace-log | grep 'from user container')" = "" ] && (echo eBPF progs not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 11)
        [ "$(sudo cat /tmp/trace-log | grep 'bytes with eBPF successfully')" = "" ] && (echo eBPF redirect progs not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 12)
        [ "$(sudo cat /tmp/trace-log | grep 'successfully deal DNS redirect query')" = "" ] && (echo DNS Proxy not work; sudo cat /tmp/trace-log; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 13)
        sudo rm -f /tmp/trace-log
